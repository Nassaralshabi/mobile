# Version Bump Workflow
# لزيادة رقم إصدار التطبيق تلقائياً

name: Version Bump

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'نوع زيادة الإصدار / Version bump type'
        required: true
        type: choice
        options:
          - patch  # 1.0.0 -> 1.0.1
          - minor  # 1.0.0 -> 1.1.0
          - major  # 1.0.0 -> 2.0.0
        default: 'patch'
      custom_version:
        description: 'إصدار مخصص (اختياري) / Custom version (optional, e.g. 2.5.3)'
        required: false
        type: string

jobs:
  bump-version:
    name: 🔢 Bump Version Number
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔧 Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: 🔢 Calculate New Version
        id: version
        working-directory: ./mobile
        run: |
          # Get current version from pubspec.yaml
          CURRENT_VERSION=$(grep "^version:" pubspec.yaml | sed 's/version: //' | tr -d ' ')
          echo "Current version: $CURRENT_VERSION"
          
          # Extract version name and build number
          VERSION_NAME=$(echo $CURRENT_VERSION | cut -d'+' -f1)
          BUILD_NUMBER=$(echo $CURRENT_VERSION | cut -d'+' -f2)
          
          echo "Version name: $VERSION_NAME"
          echo "Build number: $BUILD_NUMBER"
          
          # Check if custom version is provided
          if [ -n "${{ github.event.inputs.custom_version }}" ]; then
            NEW_VERSION_NAME="${{ github.event.inputs.custom_version }}"
            echo "📝 Using custom version: $NEW_VERSION_NAME"
          else
            # Parse version components
            MAJOR=$(echo $VERSION_NAME | cut -d'.' -f1)
            MINOR=$(echo $VERSION_NAME | cut -d'.' -f2)
            PATCH=$(echo $VERSION_NAME | cut -d'.' -f3)
            
            echo "Current components - Major: $MAJOR, Minor: $MINOR, Patch: $PATCH"
            
            # Increment based on type
            case "${{ github.event.inputs.version_type }}" in
              major)
                MAJOR=$((MAJOR + 1))
                MINOR=0
                PATCH=0
                echo "🚀 Bumping MAJOR version"
                ;;
              minor)
                MINOR=$((MINOR + 1))
                PATCH=0
                echo "✨ Bumping MINOR version"
                ;;
              patch)
                PATCH=$((PATCH + 1))
                echo "🔧 Bumping PATCH version"
                ;;
            esac
            
            NEW_VERSION_NAME="${MAJOR}.${MINOR}.${PATCH}"
          fi
          
          # Increment build number
          NEW_BUILD=$((BUILD_NUMBER + 1))
          NEW_VERSION="${NEW_VERSION_NAME}+${NEW_BUILD}"
          
          echo "✅ New version: $NEW_VERSION"
          echo "   Version name: $NEW_VERSION_NAME"
          echo "   Build number: $NEW_BUILD"
          
          # Export for next steps
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "new_version_name=$NEW_VERSION_NAME" >> $GITHUB_OUTPUT
          echo "new_build_number=$NEW_BUILD" >> $GITHUB_OUTPUT
          echo "old_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

      - name: 📝 Update pubspec.yaml
        working-directory: ./mobile
        run: |
          echo "Updating version in pubspec.yaml..."
          sed -i "s/^version: .*/version: ${{ steps.version.outputs.new_version }}/" pubspec.yaml
          
          # Verify the change
          NEW_VERSION_CHECK=$(grep "^version:" pubspec.yaml | sed 's/version: //' | tr -d ' ')
          if [ "$NEW_VERSION_CHECK" = "${{ steps.version.outputs.new_version }}" ]; then
            echo "✅ Version updated successfully to $NEW_VERSION_CHECK"
          else
            echo "❌ Version update failed!"
            exit 1
          fi

      - name: 📋 Generate Changelog Entry
        run: |
          # Create changelog entry
          DATE=$(date +"%Y-%m-%d")
          
          cat > version_changelog.md << EOF
          ## Version ${{ steps.version.outputs.new_version_name }} (Build ${{ steps.version.outputs.new_build_number }}) - $DATE
          
          ### التغييرات / Changes:
          - تحديث رقم الإصدار من ${{ steps.version.outputs.old_version }} إلى ${{ steps.version.outputs.new_version }}
          - Version bumped from ${{ steps.version.outputs.old_version }} to ${{ steps.version.outputs.new_version }}
          
          ### نوع التحديث / Update Type:
          - **${{ github.event.inputs.version_type }}** version bump
          
          ---
          EOF
          
          echo "📋 Changelog entry created"
          cat version_changelog.md

      - name: 💾 Commit Changes
        run: |
          git add mobile/pubspec.yaml
          git commit -m "chore: bump version to ${{ steps.version.outputs.new_version }}

          - Updated from ${{ steps.version.outputs.old_version }} to ${{ steps.version.outputs.new_version }}
          - Version type: ${{ github.event.inputs.version_type }}
          - Build number: ${{ steps.version.outputs.new_build_number }}
          
          🤖 Automated version bump by GitHub Actions"
          
          echo "✅ Changes committed"

      - name: 🚀 Create Version Branch
        run: |
          BRANCH_NAME="version-bump-${{ steps.version.outputs.new_version_name }}-${{ github.run_number }}"
          git checkout -b $BRANCH_NAME
          git push origin $BRANCH_NAME
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "✅ Branch created: $BRANCH_NAME"
        id: branch

      - name: 🔀 Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "chore: bump version to ${{ steps.version.outputs.new_version }}"
          branch: version-bump-${{ steps.version.outputs.new_version_name }}-${{ github.run_number }}
          title: "🔢 Version Bump: ${{ steps.version.outputs.old_version }} → ${{ steps.version.outputs.new_version }}"
          body: |
            ## 🔢 تحديث رقم الإصدار / Version Bump
            
            ### 📊 معلومات الإصدار / Version Information:
            - **الإصدار السابق / Previous Version:** `${{ steps.version.outputs.old_version }}`
            - **الإصدار الجديد / New Version:** `${{ steps.version.outputs.new_version }}`
            - **نوع التحديث / Bump Type:** `${{ github.event.inputs.version_type }}`
            - **رقم البناء / Build Number:** `${{ steps.version.outputs.new_build_number }}`
            
            ### 📝 التغييرات / Changes:
            - تم تحديث ملف `pubspec.yaml` بالإصدار الجديد
            - Updated `pubspec.yaml` with new version number
            
            ### ✅ الخطوات التالية / Next Steps:
            1. 🔍 راجع التغييرات / Review the changes
            2. ✅ وافق على الـ PR / Approve the PR
            3. 🔀 ادمج في الفرع الرئيسي / Merge to main branch
            4. 🏷️ أنشئ tag جديد: `v${{ steps.version.outputs.new_version_name }}`
            5. 🚀 قم بإطلاق النسخة الجديدة / Release new version
            
            ---
            
            🤖 تم إنشاء هذا الـ PR تلقائياً بواسطة GitHub Actions
            🤖 This PR was automatically created by GitHub Actions
          labels: |
            version-bump
            automated
          draft: false

      - name: 📊 Summary
        run: |
          echo "## 🎉 Version Bump Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Version Details:" >> $GITHUB_STEP_SUMMARY
          echo "- **Previous Version:** \`${{ steps.version.outputs.old_version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **New Version:** \`${{ steps.version.outputs.new_version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Version Name:** \`${{ steps.version.outputs.new_version_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Number:** \`${{ steps.version.outputs.new_build_number }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Bump Type:** \`${{ github.event.inputs.version_type }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Review and merge the automatically created Pull Request" >> $GITHUB_STEP_SUMMARY
          echo "2. Create a git tag: \`v${{ steps.version.outputs.new_version_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "3. Trigger a release build" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🏨 **Marina Hotel Mobile App**" >> $GITHUB_STEP_SUMMARY

  notify-success:
    name: ✅ Notify Success
    runs-on: ubuntu-latest
    needs: bump-version
    if: success()
    
    steps:
      - name: Success Message
        run: |
          echo "🎉 Version bump completed successfully!"
          echo "✅ Pull request created for review"
          echo "🏨 Marina Hotel app version updated"

  notify-failure:
    name: ❌ Notify Failure
    runs-on: ubuntu-latest
    needs: bump-version
    if: failure()
    
    steps:
      - name: Failure Message
        run: |
          echo "❌ Version bump failed!"
          echo "🔍 Please check the logs for errors"
          echo "💡 Common issues: permissions, invalid version format"
